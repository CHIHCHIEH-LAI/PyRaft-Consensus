syntax = "proto3";

package raft_stock;

// The service definition for Raft.
service RaftService {
  rpc RequestVote(VoteRequest) returns (VoteResponse);
  rpc AppendEntries(EntriesRequest) returns (EntriesResponse);
}

// The request message containing information about the node sending the request.
message VoteRequest {
  int32 term = 1;               // Current term, to detect stale requests
  int32 candidateId = 2;        // Candidate requesting vote
  int32 lastLogIndex = 3;       // Index of candidate's last log entry
  int32 lastLogTerm = 4;        // Term of candidate's last log entry
}

// The response message containing the vote result.
message VoteResponse {
  int32 term = 1;               // Current term, for the candidate to update itself
  bool voteGranted = 2;         // True means candidate received vote
}

// The request message for log entries to replicate
message EntriesRequest {
  int32 term = 1;               // Leader’s term
  int32 leaderId = 2;           // So follower can redirect clients
  int32 prevLogIndex = 3;       // Index of log entry immediately preceding new ones
  int32 prevLogTerm = 4;        // Term of prevLogIndex entry
  StockTransaction entries = 5;  // Log entries to store (empty for heartbeat; may send more than one for efficiency)
  int32 leaderCommit = 6;       // Leader’s commitIndex
}

// A log entry consists of a command for the state machine, and the term when the entry was received by the leader
message StockTransaction {
  int32 term = 1;               // Term when the entry was received by the leader
  string stockId = 3;           // Stock symbol or identifier
  int32 amount = 4;             // Quantity of stocks to buy/sell
  enum TransactionType {
    BUY = 0;
    SELL = 1;
  }
  TransactionType transactionType = 5;  // Transaction type
  double price = 6;
  int64 timestamp = 7;          // Unix timestamp of the transaction
  string userId = 8;            // User ID of the person who initiated the transaction
}

// The response to AppendEntries RPC
message EntriesResponse {
  int32 term = 1;               // Current term, for leader to update itself
  bool success = 2;             // True if follower contained entry matching prevLogIndex and prevLogTerm
}
